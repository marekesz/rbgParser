#game = "Chess"
// notes:
// - you have to actually capture opponent's king, not just check it
// - no rules about repeating states or tie after given number of turns without pawn moves
// - game is limited to 180 turns


#backLine(color) =
    [color~RookUnmoved, color~Knight, color~Bishop, color~Queen, color~King, color~Bishop, color~Knight, color~RookUnmoved]
#pawnLine(color) =
    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
#emptyLine =
    [empty, empty, empty, empty, empty, empty, empty, empty]

#board =
    backLine(black)
    pawnLine(black)
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    pawnLine(white)
    backLine(white)


#anyRook(color) = color~RookMoved, color~RookUnmoved
#majorPieces(color) = anyRook(color), color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, majorPieces(color)
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)


#players = white, black
#pieces = allPieces, empty
#variables = pawnDoubleMove, whiteKingMoved, blackKingMoved


#isBetween(color; opponentColor; piece; direction; oppositeDirection) =
    ((! (direction(empty))^*direction(color~King)) and (! (oppositeDirection(empty))^*oppositeDirection(piece)))

#isBetweenUpperRight(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (1,1); (-1,-1))
#isBetweenUpperLeft(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (-1,1); (1,-1))
#isBetweenLowerRight(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (1,-1); (-1,1))
#isBetweenLowerLeft(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (-1,-1); (1,1))
#isBetweenUp(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (0,1); (0,-1))
#isBetweenDown(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (0,-1); (0,1))
#isBetweenLeft(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (-1,0); (1,0))
#isBetweenRight(color; opponentColor; piece) = isBetween(color; opponentColor; piece; (1,0); (-1,0))

#isBetweenAllExceptHorizontal(color; opponentColor; piece) =
    isBetweenUpperRight(color;opponentColor;piece)
 or isBetweenUpperLeft(color;opponentColor;piece)
 or isBetweenLowerRight(color;opponentColor;piece)
 or isBetweenLowerLeft(color;opponentColor;piece)
 or isBetweenUp(color;opponentColor;piece)
 or isBetweenDown(color;opponentColor;piece)

#isBetweenAllExceptVertical(color; opponentColor; piece) =
    isBetweenUpperRight(color;opponentColor;piece)
 or isBetweenUpperLeft(color;opponentColor;piece)
 or isBetweenLowerRight(color;opponentColor;piece)
 or isBetweenLowerLeft(color;opponentColor;piece)
 or isBetweenLeft(color;opponentColor;piece)
 or isBetweenRight(color;opponentColor;piece)

#isBetweenAllExceptLeftDiagonal(color; opponentColor; piece) = // from upper left to lower right
    isBetweenUpperRight(color;opponentColor;piece)
 or isBetweenLowerLeft(color;opponentColor;piece)
 or isBetweenUp(color;opponentColor;piece)
 or isBetweenDown(color;opponentColor;piece)
 or isBetweenLeft(color;opponentColor;piece)
 or isBetweenRight(color;opponentColor;piece)

#isBetweenAllExceptRightDiagonal(color; opponentColor; piece) = // from upper right to lower left
    isBetweenUpperLeft(color;opponentColor;piece)
 or isBetweenLowerRight(color;opponentColor;piece)
 or isBetweenUp(color;opponentColor;piece)
 or isBetweenDown(color;opponentColor;piece)
 or isBetweenLeft(color;opponentColor;piece)
 or isBetweenRight(color;opponentColor;piece)

#isBetweenDiagonal(color; opponentColor; piece) =
    isBetweenUpperRight(color;opponentColor;piece)
 or isBetweenUpperLeft(color;opponentColor;piece)
 or isBetweenLowerRight(color;opponentColor;piece)
 or isBetweenLowerLeft(color;opponentColor;piece)

#isBetweenParallel(color; opponentColor; piece) =
    isBetweenUp(color;opponentColor;piece)
 or isBetweenDown(color;opponentColor;piece)
 or isBetweenLeft(color;opponentColor;piece)
 or isBetweenRight(color;opponentColor;piece)

#isBetweenAnyDirection(color; opponentColor; piece) =
    isBetweenDiagonal(color; opponentColor; piece)
 or isBetweenParallel(color; opponentColor; piece)

#anySquare =
    (
        (1,0)
      + (0,1)
      + (-1,0)
      + (0,-1)
    )^*

#anyDistinctSquare =
    (
        (1,0)((1,0)+(0,1))^*
      + (0,1)((-1,0)+(0,1))^*
      + (-1,0)((-1,0)+(0,-1))^*
      + (0,-1)((1,0)+(0,-1))^*
    )

#anyNeighborSquare =
    (
        ( 1, 0)
      + ( 0, 1)
      + (-1, 0)
      + ( 0,-1)
      + ( 1, 1)
      + (-1, 1)
      + ( 1,-1)
      + (-1,-1)
    )

#anyNeighborSquareWithCheck(color; opponentColor; piece) =
    (
        (? not (isBetweenAllExceptHorizontal(color; opponentColor; piece)))( 1, 0)
      + (? not (isBetweenAllExceptVertical(color; opponentColor; piece)))( 0, 1)
      + (? not (isBetweenAllExceptHorizontal(color; opponentColor; piece)))(-1, 0)
      + (? not (isBetweenAllExceptVertical(color; opponentColor; piece)))( 0,-1)
      + (? not (isBetweenAllExceptRightDiagonal(color; opponentColor; piece)))( 1, 1)
      + (? not (isBetweenAllExceptLeftDiagonal(color; opponentColor; piece)))(-1, 1)
      + (? not (isBetweenAllExceptLeftDiagonal(color; opponentColor; piece)))( 1,-1)
      + (? not (isBetweenAllExceptRightDiagonal(color; opponentColor; piece)))(-1,-1)
    )

#diagonalLine =
    (
        (( 1, 1)(empty))^*( 1, 1)
      + (( 1,-1)(empty))^*( 1,-1)
      + ((-1, 1)(empty))^*(-1, 1)
      + ((-1,-1)(empty))^*(-1,-1)
    )

#diagonalLineWithCheck(color; opponentColor; piece) =
    (
        (? not (isBetweenAllExceptRightDiagonal(color; opponentColor; piece)))(( 1, 1)(empty))^*( 1, 1)
      + (? not (isBetweenAllExceptLeftDiagonal(color; opponentColor; piece)))(( 1,-1)(empty))^*( 1,-1)
      + (? not (isBetweenAllExceptLeftDiagonal(color; opponentColor; piece)))((-1, 1)(empty))^*(-1, 1)
      + (? not (isBetweenAllExceptRightDiagonal(color; opponentColor; piece)))((-1,-1)(empty))^*(-1,-1)
    )

#parallelLine =
    (
        (( 1, 0)(empty))^*( 1, 0)
      + (( 0, 1)(empty))^*( 0, 1)
      + ((-1, 0)(empty))^*(-1, 0)
      + (( 0,-1)(empty))^*( 0,-1)
    )

#parallelLineWithCheck(color; opponentColor; piece) =
    (
        (? not (isBetweenAllExceptHorizontal(color; opponentColor; piece)))(( 1, 0)(empty))^*( 1, 0)
      + (? not (isBetweenAllExceptVertical(color; opponentColor; piece)))(( 0, 1)(empty))^*( 0, 1)
      + (? not (isBetweenAllExceptHorizontal(color; opponentColor; piece)))((-1, 0)(empty))^*(-1, 0)
      + (? not (isBetweenAllExceptVertical(color; opponentColor; piece)))(( 0,-1)(empty))^*( 0,-1)
    )

#anyDirectionLine =
    (
        diagonalLine
      + parallelLine
    )

#anyDirectionLineWithCheck(color; opponentColor; piece) =
    (
        diagonalLineWithCheck(color; opponentColor; piece)
      + parallelLineWithCheck(color; opponentColor; piece)
    )

#knightHop =
    (
        ( 1, 2)
      + ( 1,-2)
      + (-1, 2)
      + (-1,-2)
      + ( 2, 1)
      + ( 2,-1)
      + (-2, 1)
      + (-2,-1)
    )

#knightHopWithCheck(color; opponentColor; piece) =
    (
        ( 1, 2)
      + ( 1,-2)
      + (-1, 2)
      + (-1,-2)
      + ( 2, 1)
      + ( 2,-1)
      + (-2, 1)
      + (-2,-1)
    )

#checkedBy(color;piece;pattern) =
    (!
        (piece)
        pattern
        (color~King)
    )

#checkedByBishop(color;opponentColor) = checkedBy(color;opponentColor~Bishop;diagonalLine)
#checkedByRook(color;opponentColor) = checkedBy(color;anyRook(opponentColor);parallelLine)
#checkedByKnight(color;opponentColor) = checkedBy(color;opponentColor~Knight;knightHop)
#checkedByQueen(color;opponentColor) = checkedBy(color;opponentColor~Queen;anyDirectionLine)
#checkedByPawn(color;opponentColor;backDirection) = checkedBy(color;opponentColor~Pawn;(1,backDirection 1)+(-1,backDirection 1))

#checked(color;opponentColor;backDirection) =
    (
        checkedByBishop(color; opponentColor)
     or checkedByRook(color; opponentColor)
     or checkedByKnight(color; opponentColor)
     or checkedByQueen(color; opponentColor)
     or checkedByQueen(color; opponentColor; backDirection)
    )

#doublyCkecked(color;opponentColor;backDirection) =
    (
        checked(color;opponentColor;backDirection)
    and (!
            anyDistinctSquare
            (? checked(color;opponentColor;backDirection))
        )
    )

#captureAnyBy(capturingPiece; opponentColor) =
    (emptyOrColor(opponentColor))
    [@capturingPiece]

#pickUpPiece(piece) =
    (piece)[@empty]

#standardMove(piece; movePattern; opponentColor) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece; opponentColor)

#bishopMove(color; opponentColor) = standardMove(color~Bishop; diagonalLineWithCheck(color; opponentColor; color~Bishop); opponentColor)
#knightMove(color; opponentColor) = standardMove(color~Knight; knightHopWithCheck(color; opponentColor; color~Knight); opponentColor)
#queenMove(color; opponentColor) = standardMove(color~Queen; anyDirectionLineWithCheck(color; opponentColor; color~Queen); opponentColor)

#rookMove(color; opponentColor) =
    pickUpPiece(anyRook(color))
    parallelLineWithCheck(color; opponentColor; anyRook(color))
    captureAnyBy(color~RookMoved; opponentColor)

#standardKingMove(color; opponentColor) =
    standardMove(color~King; anyNeighborSquareWithCheck(color;opponentColor;color~King); opponentColor)
    [@$color~KingMoved=1]

#isAttackedByBishop(opponentColor) = diagonalLine(opponentColor~Bishop)
#isAttackedByRook(opponentColor) = parallelLine(anyRook(opponentColor))
#isAttackedByQueen(opponentColor) = anyDirectionLine(opponentColor~Queen)
#isAttackedByKnight(opponentColor) = knightHop(opponentColor~Knight)
#isAttackedByKing(opponentColor) = anyNeighborSquare(opponentColor~King)
#isAttackedByPawn(opponentColor; forwardDirection) =
    ((1, forwardDirection 1) + (-1, forwardDirection 1))(opponentColor~Pawn)

#isNotAttackedBy(opponentColor; forwardDirection) =
    (? not (!
        isAttackedByBishop(opponentColor)
      + isAttackedByRook(opponentColor)
      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor; forwardDirection)
    ))

#castlingKingMove(forwardDirection; color; opponentColor) =
    (? $color~KingMoved==0)
    pickUpPiece(color~King)
    (
        (1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        (1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        [@color~King]
        (1,0)pickUpPiece(color~RookUnmoved)
        (-2,0)
      + (-1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        (-1,0)(empty)isNotAttackedBy(opponentColor; forwardDirection)
        [@color~King]
        (-1,0)(empty) // rook CAN pass through attacked square
        (-1,0)pickUpPiece(color~RookUnmoved)
        (3,0)
    )
    [@color~RookMoved]
    [@$color~KingMoved=1]

#kingMove(forwardDirection; color; opponentColor) =
    (
        castlingKingMove(forwardDirection; color; opponentColor)
      + standardKingMove(color; opponentColor)
    )

#checkForPromotion(forwardDirection; color) =
    (
        (?(!(0, forwardDirection 1)))[@color~Pawn]
      + (? not (!(0, forwardDirection 1)))[@majorPieces(color)]
    )

#standardPawnMove(forwardDirection; backDirection; color; opponentColor) =
    pickUpPiece(color~Pawn)
    (
        // promotion cannot occur
        (? not (!(0, backDirection 2)))
        (0, forwardDirection 1)(empty)
        (0, forwardDirection 1)(empty)
        [@color~Pawn]
        [@$pawnDoubleMove=1]
      + (
            (0, forwardDirection 1)(empty)
          + ((1, forwardDirection 1)+(-1, forwardDirection 1))(singleColorPieces(opponentColor))
        )
        checkForPromotion(forwardDirection; color)
    )

#enPassantPawnMove(forwardDirection; color) =
    (? $pawnDoubleMove==1)
    (
        // we are sure that adjacent cell is occupied by opponentColor~Pawn, because pawnDoubleMove==1, so don't check it
        (1,0)pickUpPiece(color~Pawn)
        (-1,0)[@empty]
        (0, forwardDirection 1)
      + (-1,0)pickUpPiece(color~Pawn)
        (1,0)[@empty]
        (0, forwardDirection 1)
    )
    [@$pawnDoubleMove=0]
    [@color~Pawn]

#allMoves(forwardDirection; backDirection; color; opponentColor) =
    (
        anySquare
        [@$pawnDoubleMove=0]
        (
            bishopMove(color; opponentColor)
          + rookMove(color; opponentColor)
          + knightMove(color; opponentColor)
          + queenMove(color; opponentColor)
          + kingMove(forwardDirection; color; opponentColor)
          + standardPawnMove(forwardDirection; backDirection; color; opponentColor)
        )
      + enPassantPawnMove(forwardDirection; color)
    )->opponentColor
    (
        (? $opponentColor~King==0)[@$color=1]->()
      + (? $turn<=180 and $opponentColor~King>0)
    )

#rules =
    (
        allMoves(+;-;white;black)
        allMoves(-;+;black;white)
    )^*

#finalizer = ()
