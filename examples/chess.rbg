#game = "Chess"
// notes:
// - you have to actually capture opponent's king, not just check it
// - no rules about repeating states or tie after given number of turns without pawn moves
// - game is limited to 180 turns


#backLine(color) =
    [color~RookUnmoved, color~Knight, color~Bishop, color~King, color~Queen, color~Bishop, color~Knight, color~RookUnmoved]
#pawnLine(color) =
    [color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn, color~Pawn]
#emptyLine =
    [empty, empty, empty, empty, empty, empty, empty, empty]
#dummyLineBehind =
    [zone, zone, zone, zone, zone, zone, zone, zone]

#board =
    dummyLineBehind
    backLine(white)
    pawnLine(white)
    emptyLine
    emptyLine
    emptyLine
    emptyLine
    pawnLine(black)
    backLine(black)
    dummyLineBehind


#anyRook(color) = color~RookMoved, color~RookUnmoved
#majorPieces(color) = anyRook(color), color~Knight, color~Bishop, color~Queen
#singleColorPieces(color) = color~Pawn, color~King, majorPieces(color)
#emptyOrColor(color) = singleColorPieces(color), empty
#allPieces = singleColorPieces(white), singleColorPieces(black)


#players = white, black
#pieces = allPieces, empty, zone
#variables = pawnDoubleMove, whiteKingMoved, blackKingMoved


#anySquare =
    (
        (1,0)
      + (0,1)
      + (-1,0)
      + (0,-1)
    )^*

#anyNeighborSquare =
    (
        ( 1, 0)
      + ( 0, 1)
      + (-1, 0)
      + ( 0,-1)
      + ( 1, 1)
      + (-1, 1)
      + ( 1,-1)
      + (-1,-1)
    )

#diagonalLine =
    (
        (( 1, 1)(empty))^*( 1, 1)
      + (( 1,-1)(empty))^*( 1,-1)
      + ((-1, 1)(empty))^*(-1, 1)
      + ((-1,-1)(empty))^*(-1,-1)
    )

#parallelLine =
    (
        (( 1, 0)(empty))^*( 1, 0)
      + (( 0, 1)(empty))^*( 0, 1)
      + ((-1, 0)(empty))^*(-1, 0)
      + (( 0,-1)(empty))^*( 0,-1)
    )

#anyDirectionLine =
    (
        diagonalLine
      + parallelLine
    )

#knightHop =
    (
        ( 1, 2)
      + ( 1,-2)
      + (-1, 2)
      + (-1,-2)
      + ( 2, 1)
      + ( 2,-1)
      + (-2, 1)
      + (-2,-1)
    )

#captureAnyBy(capturingPiece, opponentColor) =
    (emptyOrColor(opponentColor))
    [capturingPiece]

#pickUpPiece(piece) =
    (piece)[empty]

#standardMove(piece, opponentColor, movePattern) =
    pickUpPiece(piece)
    movePattern
    captureAnyBy(piece, opponentColor)

#bishopMove(color, opponentColor) = standardMove(color~Bishop, diagonalLine, opponentColor)
#knightMove(color, opponentColor) = standardMove(color~Knight, knightHop, opponentColor)
#queenMove(color, opponentColor) = standardMove(color~Queen, anyDirectionLine, opponentColor)

#rookMove(color, opponentColor) =
    pickUpPiece(anyRook(color))
    parallelLine
    captureAnyBy(color~RookMoved, opponentColor)

#standardKingMove(color, opponentColor) =
    standardMove(color~King, anyNeighborSquare, opponentColor)
    [$color~KingMoved=1]

#isAttackedByBishop(opponentColor) = diagonalLine{opponentColor~Bishop}
#isAttackedByRook(opponentColor) = parallelLine{anyRook(opponentColor)}
#isAttackedByQueen(opponentColor) = anyDirectionLine{opponentColor~Queen}
#isAttackedByKnight(opponentColor) = knightHop{opponentColor~Knight}
#isAttackedByKing(opponentColor) = anyNeighborSquare(opponentColor~King}
#isAttackedByPawn(opponentColor, forwardDirection) =
    ((1, forwardDirection 1) + (-1, forwardDirection 1))(opponentColor~Pawn)

#isNotAttackedBy(opponentColor, forwardDirection) =
    ?(not !(
        isAttackedByBishop(opponentColor)
      + isAttackedByRook(opponentColor)
      + isAttackedByQueen(opponentColor)
      + isAttackedByKnight(opponentColor)
      + isAttackedByKing(opponentColor)
      + isAttackedByPawn(opponentColor, forwardDirection)
    ))

#castlingKingMove(forwardDirection, color, opponentColor) =
    ?($color~KingMoved==0)
    pickUpPiece(color~King)
    (
        (-1,0)(empty)isNotAttackedBy(opponentColor, forwardDirection)
        (-1,0)(empty)isNotAttackedBy(opponentColor, forwardDirection)
        [color~King]
        (-1,0)pickUpPiece(color~RookUnmoved)
        (2,0)
      + (1,0)(empty)isNotAttackedBy(opponentColor, forwardDirection)
        (1,0)(empty)isNotAttackedBy(opponentColor, forwardDirection)
        [color~King]
        (1,0)(empty) // rook CAN pass through attacked square
        (1,0)pickUpPiece(color~RookUnmoved)
        (-3,0)
    )
    /color~RookMoved/
    [$color~KingMoved=1]

#kingMove(forwardDirection, color, opponentColor) =
    (
        castlingKingMove(forwardDirection, color, opponentColor)
      + standardKingMove(forwardDirection, color, opponentColor)
    )

#checkForPromotion(forwardDirection, color) =
    (
        ?(!((0, forwardDirection 1)(allPieces, empty)))[color~Pawn]
      + ?(!((0, forwardDirection 1)(zone)))[majorPieces(color)]
    )

#standardPawnMove(forwardDirection, backDirection, color, opponentColor) =
    pickUpPiece(color~Pawn)
    (
        // promotion cannot occur
        ?(!((0, backDirection 2)(zone)))
        (0, forwardDirection 1)(empty)
        (0, forwardDirection 1)(empty)
        [color~Pawn]
        [$pawnDoubleMove=1]
      + (
            (0, forwardDirection 1)(empty)
          + ((1, forwardDirection 1)+(-1, forwardDirection 1))(singleColorPieces(opponentColor))
        )
        checkForPromotion(forwardDirection, color)
    )

#enPassantPawnMove(forwardDirection, color) =
    ?($pawnDoubleMove==1)
    (
        // we are sure that adjacent cell is occupied by opponentColor~Pawn, because pawnDoubleMove==1, so don't check it
        (1,0)pickUpPiece(color~Pawn)
        (-1,0)[empty]
        (0, forwardDirection 1)
      + (-1,0)pickUpPiece(color~Pawn)
        (1,0)[empty]
        (0, forwardDirection 1)
    )
    [$pawnDoubleMove=0]
    checkForPromotion(forwardDirection, color)

#allMoves(forwardDirection, backDirection, color, opponentColor) =
    (
        anySquare
        [$pawnDoubleMove=0]
        (
            bishopMove(color, opponentColor)
          + rookMove(color, opponentColor)
          + knightMove(color, opponentColor)
          + queenMove(color, opponentColor)
          + kingMove(color, opponentColor)
          + standardPawnMove(forwardDirection, backDirection, color, opponentColor)
        )
      + enPassantPawnMove(forwardDirection, color)
    )->opponentColor
    (
        ?($opponentColor~King==0)[$color=1]()
      + ?($turn<=180 and $opponentColor~King>0)
    )

#rules =
    (
        allMoves(+,-,white,black)
        allMoves(-,+,black,white)
    )^*

