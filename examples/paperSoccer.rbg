#game = "Paper Soccer"
// notes:
// - 10x10 pitch + 2x1 goals
// - being unable to move ball means a defeat
// - goal is single square in the center of the last/first line, you must reach this square to win
// - edges are marked with "visited" for the sake of simplicity
// - empty squares are always empty, their purpose is to place ball (i.e. current square) at them


#leftMarkedTriplet(mark, between) = mark, between, between
#rightMarkedTriplet(mark,between) = between, between, mark

#lineTemplate(edgeColumns, nonGoalBetween, nonGoalColumns, goalEdgeColumns, goalBetween, goalColumn) =
    [
        leftMarkedTriplet(edgeColumns, nonGoalBetween),
        leftMarkedTriplet(nonGoalColumns, nonGoalBetween),
        leftMarkedTriplet(nonGoalColumns, nonGoalBetween),
        leftMarkedTriplet(goalEdgeColumns, goalBetween),
        goalColumn,
        rightMarkedTriplet(goalEdgeColumns, goalBetween),
        rightMarkedTriplet(nonGoalColumns, nonGoalBetween),
        rightMarkedTriplet(nonGoalColumns, nonGoalBetween),
        rightMarkedTriplet(edgeColumns, nonGoalBetween)
    ]

#whiteGoalLine =
    lineTemplate(visited, visited, visited,   empty,    visited,  whiteGoal)
    lineTemplate(visited, visited, visited, visited, notVisited, notVisited)
    lineTemplate(visited, visited, visited, visited, notVisited, notVisited)

#blackGoalLine =
    lineTemplate(visited, visited, visited, visited, notVisited, notVisited)
    lineTemplate(visited, visited, visited, visited, notVisited, notVisited)
    lineTemplate(visited, visited, visited,   empty,    visited,  blackGoal)

#whiteFirstNonGoalLine =
    lineTemplate(  empty,    visited,      empty,      empty, notVisited,      empty)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)

#blackFirstNonGoalLine =
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(  empty,    visited,      empty,      empty, notVisited,      empty)

#whiteRegularLine =
    lineTemplate(  empty, notVisited,      empty,      empty, notVisited,      empty)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)

#blackRegularLine =
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(visited, notVisited, notVisited, notVisited, notVisited, notVisited)
    lineTemplate(  empty, notVisited,      empty,      empty, notVisited,      empty)

#board =
    whiteGoalLine
    whiteFirstNonGoalLine
    whiteRegularLine
    whiteRegularLine
    whiteRegularLine
    whiteRegularLine
    lineTemplate(empty, notVisited, empty, empty, notVisited, ball)
    blackRegularLine
    blackRegularLine
    blackRegularLine
    blackRegularLine
    blackFirstNonGoalLine
    blackGoalLine


#begins = white


#findBall = ((1,0)+(1,0)+(-1,0)+(0,-1))^*{ball}/empty/

#existsAround(square) =

#canMoveFurther =
    '
        ( 1, 0){visited}
      + ( 0, 1){visited}
      + (-1, 0){visited}
      + ( 0,-1){visited}
      + ( 1, 1){visited}
      + (-1, 1){visited}
      + ( 1,-1){visited}
      + (-1,-1){visited}
    '

#changeNeighbor(from, to) =
    (
        ( 1, 0){from}/to/(-1, 0)
      + ( 0, 1){from}/to/( 0,-1)
      + (-1, 0){from}/to/( 1, 0)
      + ( 0,-1){from}/to/( 0, 1)
      + ( 1, 1){from}/to/(-1,-1)
      + (-1, 1){from}/to/( 1,-1)
      + ( 1,-1){from}/to/(-1, 1)
      + (-1,-1){from}/to/( 1, 1)
    )

#changeJustArrivedIntoVisited =
    changeNeighbor(justArrived, visited)

#endMove =
    ?[not canMoveFurther]
    changeJustArrivedIntoVisited

#visitAuxilialrySquare(x, y, how) =
    (x, y){notVisited}/how/

#jumpInGivenDirection(x, y) =
    {empty}
    visitAuxilialrySquare(x, y, visited)
    visitAuxilialrySquare(x, y, justArrived)
    (x, y){empty, whiteGoal, blackGoal}

#singleJump =
    (
        jumpInGivenDirection( 1, 0)
      + jumpInGivenDirection( 0, 1)
      + jumpInGivenDirection(-1, 0)
      + jumpInGivenDirection( 0,-1)
      + jumpInGivenDirection( 1, 1)
      + jumpInGivenDirection(-1, 1)
      + jumpInGivenDirection( 1,-1)
      + jumpInGivenDirection(-1,-1)
    )

#wholeMove =
    singleJump
    (
        changeJustArrivedIntoVisited
        singleJump
    )^*
    endMove

#rules =
    findBall
    (
        wholeMove->black
        ({whiteGoal, blackGoal}+wholeMove->white)
    )^*
    (
        {whiteGoal}[$black=1]
      + {blackGoal}[$white=1]
    )
